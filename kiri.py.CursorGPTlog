After running "python3 kiri.py", output:

"Gtk-Message: 22:24:37.812: Failed to load module "xapp-gtk3-module"
Icon name (case sensitive): distributor-logo

(stackoverflow-2.py:212545): Gtk-WARNING **: 22:24:42.023: Theme directory  of theme Floflis has no size field


(stackoverflow-2.py:212545): Gtk-WARNING **: 22:24:42.023: Theme directory 22x22/actions of theme Floflis has no size field


(stackoverflow-2.py:212545): Gtk-WARNING **: 22:24:42.023: Theme directory 22x22@2x/actions of theme Floflis has no size field

/usr/share/icons/Floflis/scalable/places/distributor-logo.svg

"

In the current behavior, the script begin saying "Icon name (case sensitive): ", which is a prompt, right?

But I want it to support not only user interaction, but also support running programatically when using a flag.

For example: running "python3 kiri.py distributor-logo" mean non-interactive, mean the user or machine is already defining the icon to search for.

Also, in this non-interactive mode, I need another help from you beyond defining that non-interactive mode: outputting that "/usr/share/icons/Floflis/scalable/places/distributor-logo.svg" directly, not more not less (by getting the last line or one line before the last, I don't know, you know the best approach so I'm counting on you Cursor AI).





To modify the script to support non-interactive mode, you can use the sys.argv module in Python, which allows you to pass command line arguments to your script.

In the kiri.py script, you can modify the icon_name input line to check if any arguments were passed to the script. If an argument was passed, it will use that as the icon_name. If not, it will prompt the user for input.

Here's how you can modify the kiri.py script:

import sys

if len(sys.argv) > 1:
    icon_name = sys.argv[1]
else:
    icon_name = input("Icon name (case sensitive): ")
    
This code checks if there are more than one arguments passed to the script (the first argument is always the script name itself). If there are, it uses the second argument (sys.argv[1]) as the icon_name. If not, it prompts the user for input.

For the second part of your question, to only output the last line of the script (the icon path), you can modify the print statements in the script. Instead of printing the icon paths as they are found, you can store them in a list and only print the last one at the end of the script.

Here's how you can modify the kiri.py script:

found_icons = []

# ... rest of the script ...

if found_icons:
    print(found_icons[-1])
else:
    print(icon_name, "was not found")
    
found_icons = []

# ... rest of the script ...

if found_icons:
    print(found_icons[-1])
else:
    print(icon_name, "was not found")
    
This code stores the found icon paths in the found_icons list and only prints the last one (found_icons[-1]) at the end of the script. If no icons were found, it prints a message saying the icon was not found.
